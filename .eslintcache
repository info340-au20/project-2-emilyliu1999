[{"/Users/emilyliu/INFO340/project-2-emilyliu1999/src/index.js":"1","/Users/emilyliu/INFO340/project-2-emilyliu1999/src/App.js":"2","/Users/emilyliu/INFO340/project-2-emilyliu1999/src/taskDetails.js":"3"},{"size":991,"mtime":1608019460023,"results":"4","hashOfConfig":"5"},{"size":9431,"mtime":1608032031763,"results":"6","hashOfConfig":"5"},{"size":4065,"mtime":1608031527027,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"13delky",{"filePath":"11","messages":"12","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"10"},"/Users/emilyliu/INFO340/project-2-emilyliu1999/src/index.js",[],["16","17"],"/Users/emilyliu/INFO340/project-2-emilyliu1999/src/App.js",["18","19","20","21","22","23","24","25","26","27"],"/Users/emilyliu/INFO340/project-2-emilyliu1999/src/taskDetails.js",["28"],"import React, { useState, useEffect } from 'react';\nimport firebase from 'firebase/app';\nimport { Formik, Field, Form, ErrorMessage, useFormikContext } from 'formik';\nimport * as Yup from 'yup';\nimport DatePicker from \"react-datepicker\";\nimport { Redirect, useParams } from 'react-router-dom';\nimport \"react-datepicker/dist/react-datepicker.css\";\n\n// React component for the detailed page view of a task\nexport function TaskDetailsPage(props) {\n  const [currentTask, setCurrentTask] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isRedirect, setIsRedirect] = useState(false);\n\n  const { taskKey } = useParams();\n  const queryString = props.user.displayName + \"/tasks/\" + taskKey;\n\n  const redirectToHome = () => {\n    return <Redirect exact to=\"/\" />;\n  };\n\n  const addNewTask = (taskKey, task) => {\n    if (taskKey === \"new\") {\n      firebase.database().ref(props.user.displayName + \"/tasks\").push(task);  // push a new task\n    } else {\n      firebase.database().ref(queryString).set(task); // overwrite specifically the existing task\n    }\n  };\n\n  const DatePickerField = ({ name }) => {\n    const formik = useFormikContext();\n    const field = formik.getFieldProps(name);\n\n    return (\n      <DatePicker\n        name={field.name}\n        value={field.value}\n        selected={(field.value && new Date(field.value)) || null}\n        onChange={value => formik.setFieldValue(name, value)}\n      />\n    );\n  }\n\n  useEffect(() => { // if not creating a new task, check if the task exists\n    firebase.database().ref(queryString).once('value', function(snapshot) {\n      if (taskKey !== \"new\") {\n        if (snapshot.val()) {\n          setCurrentTask(snapshot.val());\n        }\n      }\n    }).then(() => setIsLoading(false));\n  }, []);\n\n  // if there has just been a change, redirect to the home page\n  if (isRedirect) {\n    return redirectToHome();\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"spinner\">\n        <i className=\"fa fa-spinner fa-spin fa-3x\" aria-label=\"Loading...\"></i>\n      </div>\n    );\n  }\n\n  // error message for when the task is not found in the database\n  if (taskKey !== \"new\" && !currentTask) {\n    return (\n      <h2>Task not found.</h2>\n    );\n  }\n\n  return (\n    <>\n      <Formik\n         initialValues={{\n           taskName: (currentTask ? currentTask.name : \"\"),\n           taskDescription: (currentTask ? currentTask.desc : \"\"),\n           deadline: (currentTask ? Date.parse(currentTask.deadline) : \"\"),\n           complete: (currentTask ? currentTask.complete : false)\n         }}\n         validationSchema={Yup.object({\n           taskName: Yup.string()\n             .required('Required'),\n           taskDescription: Yup.string()\n             .required('Required'),\n           deadline: Yup.string().required('Required'),\n           complete: Yup.string()\n         })}\n         onSubmit={(values, { setSubmitting }) => {\n           setTimeout(() => {\n             let newTaskObj = {name: values.taskName, desc: values.taskDescription, deadline: values.deadline.toString(), complete: values.complete};\n             addNewTask(taskKey, newTaskObj);\n             setIsRedirect(true);\n             setSubmitting(false);\n           }, 400);\n         }}\n      >\n\n      <Form>\n        <label htmlFor=\"taskName\">Task Name</label>\n        <Field name=\"taskName\" type=\"text\" />\n        <ErrorMessage name=\"taskName\" />\n\n        <label htmlFor=\"taskDescription\">Task Description</label>\n        <Field name=\"taskDescription\" as=\"textarea\" />\n        <ErrorMessage name=\"taskDescription\" />\n\n        <label htmlFor=\"deadline\">Deadline</label>\n        <DatePickerField name=\"deadline\" />\n        <ErrorMessage name=\"deadline\" />\n\n        <label htmlFor=\"complete\">Complete?</label>\n        <Field name=\"complete\" type=\"checkbox\" />\n        <ErrorMessage name=\"complete\" />\n\n        <button type=\"submit\">save</button>\n        <button type=\"button\" onClick={() => {\n          setIsRedirect(true);\n        }}>cancel</button>\n      </Form>\n    </Formik>\n   </>\n  );\n};\n\nexport default TaskDetailsPage;\n",{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","severity":1,"message":"34","line":36,"column":21,"nodeType":"35","messageId":"36","endLine":36,"endColumn":33},{"ruleId":"37","severity":1,"message":"38","line":140,"column":13,"nodeType":"39","endLine":140,"endColumn":25},{"ruleId":"40","severity":1,"message":"41","line":140,"column":13,"nodeType":"39","endLine":140,"endColumn":25},{"ruleId":"37","severity":1,"message":"38","line":141,"column":13,"nodeType":"39","endLine":141,"endColumn":25},{"ruleId":"40","severity":1,"message":"41","line":141,"column":13,"nodeType":"39","endLine":141,"endColumn":25},{"ruleId":"37","severity":1,"message":"38","line":142,"column":13,"nodeType":"39","endLine":142,"endColumn":25},{"ruleId":"40","severity":1,"message":"41","line":142,"column":13,"nodeType":"39","endLine":142,"endColumn":25},{"ruleId":"42","severity":1,"message":"43","line":172,"column":6,"nodeType":"44","endLine":172,"endColumn":8,"suggestions":"45"},{"ruleId":"33","severity":1,"message":"46","line":196,"column":9,"nodeType":"35","messageId":"36","endLine":196,"endColumn":14},{"ruleId":"40","severity":1,"message":"41","line":258,"column":13,"nodeType":"39","endLine":258,"endColumn":53},{"ruleId":"42","severity":1,"message":"47","line":52,"column":6,"nodeType":"44","endLine":52,"endColumn":8,"suggestions":"48"},"no-native-reassign",["49"],"no-negated-in-lhs",["50"],"no-unused-vars","'setCompleted' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'props' and 'taskRef'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["51"],"'tasks' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'queryString' and 'taskKey'. Either include them or remove the dependency array.",["52"],"no-global-assign","no-unsafe-negation",{"desc":"53","fix":"54"},{"desc":"55","fix":"56"},"Update the dependencies array to be: [props, taskRef]",{"range":"57","text":"58"},"Update the dependencies array to be: [queryString, taskKey]",{"range":"59","text":"60"},[5111,5113],"[props, taskRef]",[1761,1763],"[queryString, taskKey]"]