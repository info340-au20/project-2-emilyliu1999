[{"/Users/emilyliu/INFO340/project-2-emilyliu1999/src/index.js":"1","/Users/emilyliu/INFO340/project-2-emilyliu1999/src/App.js":"2","/Users/emilyliu/INFO340/project-2-emilyliu1999/src/taskDetails.js":"3","/Users/emilyliu/INFO340/project-2-emilyliu1999/src/schedule.js":"4"},{"size":991,"mtime":1608019460023,"results":"5","hashOfConfig":"6"},{"size":11455,"mtime":1608180592644,"results":"7","hashOfConfig":"6"},{"size":4071,"mtime":1608155844677,"results":"8","hashOfConfig":"6"},{"size":2125,"mtime":1608180592647,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"13delky",{"filePath":"13","messages":"14","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"12"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"12"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"12"},"/Users/emilyliu/INFO340/project-2-emilyliu1999/src/index.js",[],["22","23"],"/Users/emilyliu/INFO340/project-2-emilyliu1999/src/App.js",["24","25","26","27","28","29","30","31","32","33","34","35","36","37"],"import React, { useEffect, useState } from 'react';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport TaskDetailsPage from './taskDetails.js';\nimport {SchedulePage} from './schedule.js';\n// import InboxPage from './index.js';\n\nimport { Route, Switch, Redirect, NavLink } from 'react-router-dom';\n\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\n\n// FirebaseUI config\nconst uiConfig = {\n  signInOptions: [\n    {\n      provider: firebase.auth.EmailAuthProvider.PROVIDER_ID,\n      requireDisplayName: true\n    },\n    firebase.auth.GoogleAuthProvider.PROVIDER_ID, // Google login\n  ],\n  //page won't show account chooser\n  credentialHelper: 'none',\n  //use popup instead of redirect for external sign-up methods -- Google\n  signInFlow: 'popup',\n  callbacks: {\n    //Avoid redirects after sign-in\n    signInSuccessWithAuthResult: () => false,\n  },\n};\n\nexport function App(props) {\n  // changed from decomposed instantiation to prevent ESLint\n  // from getting angry about an unused variable\n  const [tasks, setTasks] = useState([]);\n  const [completed, setCompleted] = useState([]);\n\n  // state variables for error message and current user\n  const [user, setUser] = useState(undefined);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // callback for updating the state for tasks\n  const handleTaskUpdate = (newTasks) => {\n    setTasks(newTasks);\n  };\n\n  ////////////////////\n  // use effect hook to wait until the component loads\n  useEffect(() => {\n    const authUnregisterHandler = firebase.auth().onAuthStateChanged((firebaseUser) => {\n      if(firebaseUser) {\n        console.log( firebaseUser.displayName + \", you are logged in!\")\n        setUser(firebaseUser);\n        setIsLoading(false);\n      } else {\n        console.log(\"Logged out\")\n        setUser(null);\n        setIsLoading(false);\n      }\n    });\n\n    return function cleanup() {\n      authUnregisterHandler();\n    }\n  }, []) // Only run hook on first load\n\n  if (isLoading) {\n    return (\n      <div className=\"spinner\">\n        <i className=\"fa fa-spinner fa-spin fa-3x\" aria-label=\"Loading...\"></i>\n      </div>\n    );\n  }\n\n  let content = null; //content to render\n\n  if(!user) { // if no user has successfully logged in, show landing/login page\n    content = (\n      <div>\n        <div class=\"landing\">\n            <h1>flora & fauna</h1>\n        </div>\n\n        <section id=\"landing\">\n          <h1>let's get stuff done together.</h1>\n          <i class=\"fab fa-pagelines\" aria-label=\"leaf\"></i>\n          <i class=\"fab fa-pagelines\" aria-label=\"leaf\"></i>\n          <i class=\"fab fa-pagelines\" aria-label=\"leaf\"></i>\n          <p>\n              flora & fauna is more than just a productivity toolâ€“ we're a way of life.\n              We're here to keep you on track as you bloom towards your lofiest goals, every step of the way.\n          </p>\n\n          <div class=\"login-page\">\n            <h2>sign in</h2>\n            <StyledFirebaseAuth uiConfig={uiConfig} firebaseAuth={firebase.auth()} />\n          </div>\n        </section>\n      </div>\n    );\n  } else {  // otherwise, show welcome page\n    content = (\n      <div className=\"content\">\n        <Header />\n        <Main user={user} tasks={tasks} completed={completed} taskUpdate={handleTaskUpdate}/>\n      </div>\n    );\n  }\n  return content;\n}\n\nexport function Header() {\n  return (\n    <header>\n      <div className=\"nav-bar\">\n        <SideBar />\n      </div>\n    </header>\n  );\n}\n\nexport function SideBar() {\n  //allow user to log out\n  const handleSignOut = () => {\n    firebase.auth().signOut();\n  }\n\n  return (\n    <div className=\"side-bar\">\n      <div className=\"menu\">\n        <ul>\n          {/* <li><i className=\"fa fa-bars\" aria-label=\"menu\" onClick=\"show()\"></i></li> */}\n          <a href=\"javascript:void(0)\" className=\"closebtn\" onClick={ToggleNav}>X</a>\n          <li><NavLink exact to=\"/\" activeClassName=\"activeLink\"><i className=\"fas fa-home\" aria-label=\"home\"></i>home</NavLink></li>\n          <li><NavLink to=\"/schedule\" activeClassName=\"activeLink\"><i className=\"far fa-calendar-alt\" aria-label=\"schedule\"></i>schedule</NavLink></li>\n          <li onClick={handleSignOut}><NavLink exact to=\"/\"><i className=\"fas fa-lock\" aria-label=\"lock\"></i>log out</NavLink></li>\n        </ul>\n\n      </div>\n      <div className=\"social-media\">\n        <li><a href=\"#\"><i className=\"fab fa-facebook-f\" aria-label=\"facebook\" aria-hidden=\"true\"></i></a></li>\n        <li><a href=\"#\"><i className=\"fab fa-instagram\" aria-label=\"instagram\" aria-hidden=\"true\"></i></a></li>\n        <li><a href=\"#\"><i className=\"fab fa-twitter\" aria-label=\"twitter\" aria-hidden=\"true\"></i></a></li>\n      </div>\n    </div>\n  );\n}\n\n// toggle hamburger menu\nexport function ToggleNav() {\n  const Show = () => {\n    const [sideBar, setSideBar] = useState(false)\n    const showSideBar = () => setSideBar(!sideBar);\n    \n    return (\n      <div>\n        { sideBar ? <SideBar onClick={showSideBar} /> : null }\n      </div>\n    )\n  }\n}\n\n// ReactDOM.render(<Search />, document.querySelector(\"#container\"))\n\n\n// React component handling routing to the proper pages\nexport function Main(props) {\n  const user = {...props.user};\n  const tasks = [...props.tasks];\n  const taskRef = firebase.database().ref(user.displayName + \"/tasks\");\n\n  useEffect(() => {\n    let tasks = [];\n    taskRef.on('value', (snapshot) => {\n      const taskValue = snapshot.val();\n      let objectKeyArray = Object.keys(taskValue);\n      if (objectKeyArray) {\n        tasks = objectKeyArray.map((key) => {\n          let singleTaskObj = taskValue[key];\n          singleTaskObj.key = key;\n          return singleTaskObj;\n        })\n        props.taskUpdate(tasks);\n      }\n    });\n\n    return function cleanup() {\n      taskRef.off();\n    }\n  }, []);\n\n\n  // <Route path=\"/schedule\" component={SchedulePage} />\n  return (\n    <section>\n      <div className=\"top-bar\">\n        <button className=\"openbtn\" onClick={ToggleNav}><i className=\"fa fa-bars\" aria-label=\"menu\"></i></button>\n        <h1>flora & fauna</h1>\n        <Switch>\n          <Route exact path=\"/\" render={(routerProps) => (\n            <HomePage user={user} tasks={tasks} />\n          )}/>\n          <Route path=\"/task/:taskKey\" render={(routerProps) => (\n            <TaskDetailsPage user={user} />\n          )}/>\n          <Route path=\"/schedule\" render={(routerProps) => (\n            <SchedulePage tasks={tasks}/>\n          )}/>\n          <Redirect exact to=\"/\" />\n        </Switch>\n      </div>\n    </section>\n  );\n}\n\nexport function HomePage(props) {\n  const user = {...props.user};\n  const tasks = [...props.tasks];\n  return (\n    <div className=\"content\">\n      <p><em>welcome, {user.displayName}</em></p>\n      <p><em>\"growth happens little by little, day by day.\"</em></p>\n      <div className=\"key\">\n        <li><i className=\"fas fa-seedling\" aria-label=\"seed\"></i>= in progress</li>\n        <li><i className=\"fab fa-pagelines\" aria-label=\"leaf\"></i>= complete</li>\n      </div>\n\n      <NavLink to=\"/task/new\">\n        <button className=\"key add\">\n          <li><i className=\"fas fa-plus-circle\" aria-label=\"circle with plus sign\"></i>Add New Task</li>\n        </button>\n      </ NavLink>\n\n      <TaskBox username={user.displayName} tasks={props.tasks} />\n    </div>\n  );\n}\n\nexport function TaskBox(props) {\n  let taskList = [];\n  let completedList = [];\n  props.tasks.forEach((task) => {\n    // sort into current and completed lists\n    if (!task.complete) {\n      taskList.push(task);\n    } else {\n      completedList.push(task);\n    }\n  });\n\n  return (\n    <div className=\"container\">\n        <div className=\"row\">\n            <div className=\"col d-flex\">\n                <TaskCard username={props.username} tasks={taskList} isTaskList={true}/>\n            </div>\n            <div className=\"col d-flex\">\n                <TaskCard username={props.username} tasks={completedList} isTaskList={false}/>\n            </div>\n        </div>\n    </div>\n  );\n}\n\nexport function TaskCard(props) {\n  const [ isToday, setIsToday ] = useState(true);\n\n  let title;\n  let navs;\n  let todayTasks;\n  let thisWeekTasks;\n\n  if (props.isTaskList) {\n    title = \"current tasks\";\n  } else {\n    title = \"completed tasks\";\n  }\n\n  const toggleIsToday = () => {\n    setIsToday(!isToday);\n  };\n\n  navs = (\n    <li className=\"nav-item\">\n      <a className={\"nav-link\" + (isToday ? \" active\" : \"\")} onClick={toggleIsToday} href=\"#\">{\"today\"}</a>\n      <a className={\"nav-link\" + (!isToday ? \" active\" : \"\")} onClick={toggleIsToday} href=\"#\">{\"this week\"}</a>\n    </li>\n  );\n\n  let currentDate = new Date();\n  currentDate.setHours(0, 0, 0, 0); // reset the time of the current date\n  let nextWeekDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate() + 7);\n\n  let todayTaskList = [];\n  todayTaskList = props.tasks.filter(task => {\n    let taskDate = new Date(task.deadline);\n    return taskDate.getTime() === currentDate.getTime();\n  });\n\n  let thisWeekTaskList = [];\n  thisWeekTaskList = props.tasks.filter(task => {\n    let taskDate = new Date(task.deadline);\n    return (taskDate > currentDate) && (taskDate <= nextWeekDate);\n  });\n\n  todayTasks = todayTaskList;\n  thisWeekTasks = thisWeekTaskList;\n\n  return (\n    <div className=\"card mb-4\">\n      <div className=\"card-header\" role=\"navigation\">\n          <h2 className=\"mb-4\">{title}</h2>\n          <ul className=\"nav nav-tabs card-header-tabs\">\n            {navs}\n          </ul>\n      </div>\n\n      <div className={\"card-body \" + title + \"-list\"}>\n          <div className=\"row\">\n              <div className=\"col-sm\">\n                {(isToday ?\n                  <TaskList\n                    username={props.username}\n                    tasks={todayTasks}\n                  />\n                  :\n                  <TaskList\n                    username={props.username}\n                    tasks={thisWeekTasks}\n                  />)}\n              </div>\n          </div>\n      </div>\n    </div>\n  );\n}\n\nexport function TaskList(props) {\n  let taskItems;\n  if (props.tasks !== undefined) {\n    taskItems = props.tasks.map(task =>\n      // pass username, task info, and task key twice (once as React key, again for querying the database)\n      <TaskItem username={props.username} name={task.name} desc={task.desc} deadline={task.deadline} key={task.key} queryKey={task.key} complete={task.complete} />\n    );\n  } else {\n    taskItems = undefined;\n  }\n\n  return (\n      <ul className=\"list-group list-group-flush\">\n        {taskItems}\n      </ul>\n  );\n}\n\nexport function TaskItem(props) {\n  let taskName = props.name;\n  let queryString = props.username + \"/tasks/\" + props.queryKey;\n\n  // set up initial state\n  let icon;\n  if (!props.complete) {\n      icon = <i className=\"fas fa-seedling\" aria-label=\"seed\"></i>\n  } else {\n      icon = <i className=\"fab fa-pagelines\" aria-label=\"leaf\"></i>\n  }\n\n  const handleClick = (event) => {\n    firebase.database().ref(queryString).set({name: taskName, desc: props.desc, deadline: props.deadline, complete: !props.complete});\n  }\n\n  const handleDeleteClick = (event) => {\n    event.stopPropagation();\n    firebase.database().ref(queryString).remove();\n  }\n\n  return (\n      <li className=\"list-group-item\" onClick={handleClick}>\n        <div>\n          {icon}\n          {taskName}\n        </div>\n        <i className=\"fa fa-window-close\" onClick={handleDeleteClick} aria-label=\"exit\" aria-hidden=\"true\"></i>\n      </li>\n  );\n}\n\nexport default App;\n","/Users/emilyliu/INFO340/project-2-emilyliu1999/src/taskDetails.js",["38"],"import React, { useState, useEffect } from 'react';\nimport firebase from 'firebase/app';\nimport { Formik, Field, Form, ErrorMessage, useFormikContext } from 'formik';\nimport * as Yup from 'yup';\nimport DatePicker from \"react-datepicker\";\nimport { Redirect, useParams } from 'react-router-dom';\nimport \"react-datepicker/dist/react-datepicker.css\";\n\n// React component for the detailed page view of a task\nexport function TaskDetailsPage(props) {\n  const [currentTask, setCurrentTask] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isRedirect, setIsRedirect] = useState(false);\n\n  const { taskKey } = useParams();\n  const queryString = props.user.displayName + \"/tasks/\" + taskKey;\n\n  const redirectToHome = () => {\n    return <Redirect exact to=\"/\" />;\n  };\n\n  const addNewTask = (taskKey, task) => {\n    if (taskKey === \"new\") {\n      firebase.database().ref(props.user.displayName + \"/tasks\").push(task);  // push a new task\n    } else {\n      firebase.database().ref(queryString).set(task); // overwrite specifically the existing task\n    }\n  };\n\n  const DatePickerField = ({ name }) => {\n    const formik = useFormikContext();\n    const field = formik.getFieldProps(name);\n\n    return (\n      <DatePicker\n        name={field.name}\n        value={field.value}\n        selected={(field.value && new Date(field.value)) || null}\n        onChange={value => formik.setFieldValue(name, value)}\n      />\n    );\n  }\n\n  useEffect(() => { // if not creating a new task, check if the task exists\n    firebase.database().ref(queryString).once('value', function(snapshot) {\n      if (taskKey !== \"new\") {\n        if (snapshot.val()) {\n          setCurrentTask(snapshot.val());\n        }\n      }\n    }).then(() => setIsLoading(false));\n  }, []);\n\n  // if there has just been a change, redirect to the home page\n  if (isRedirect) {\n    return redirectToHome();\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"spinner\">\n        <i className=\"fa fa-spinner fa-spin fa-3x\" aria-label=\"Loading...\"></i>\n      </div>\n    );\n  }\n\n  // error message for when the task is not found in the database\n  if (taskKey !== \"new\" && !currentTask) {\n    return (\n      <h2>Task not found.</h2>\n    );\n  }\n\n  return (\n    <>\n      <Formik\n         initialValues={{\n           taskName: (currentTask ? currentTask.name : \"\"),\n           taskDescription: (currentTask ? currentTask.desc : \"\"),\n           deadline: (currentTask ? Date.parse(currentTask.deadline) : \"\"),\n           complete: (currentTask ? currentTask.complete : false)\n         }}\n         validationSchema={Yup.object({\n           taskName: Yup.string()\n             .required('*Required*'),\n           taskDescription: Yup.string()\n             .required('*Required*'),\n           deadline: Yup.string().required('*Required*'),\n           complete: Yup.string()\n         })}\n         onSubmit={(values, { setSubmitting }) => {\n           setTimeout(() => {\n             let newTaskObj = {name: values.taskName, desc: values.taskDescription, deadline: values.deadline.toString(), complete: values.complete};\n             addNewTask(taskKey, newTaskObj);\n             setIsRedirect(true);\n             setSubmitting(false);\n           }, 400);\n         }}\n      >\n\n      <Form>\n        <label htmlFor=\"taskName\">Task Name</label>\n        <Field name=\"taskName\" type=\"text\" />\n        <ErrorMessage name=\"taskName\" />\n\n        <label htmlFor=\"taskDescription\">Task Description</label>\n        <Field name=\"taskDescription\" as=\"textarea\" />\n        <ErrorMessage name=\"taskDescription\" />\n\n        <label htmlFor=\"deadline\">Deadline</label>\n        <DatePickerField name=\"deadline\" />\n        <ErrorMessage name=\"deadline\" />\n\n        <label htmlFor=\"complete\">Complete?</label>\n        <Field name=\"complete\" type=\"checkbox\" />\n        <ErrorMessage name=\"complete\" />\n\n        <button type=\"submit\">save</button>\n        <button type=\"button\" onClick={() => {\n          setIsRedirect(true);\n        }}>cancel</button>\n      </Form>\n    </Formik>\n   </>\n  );\n};\n\nexport default TaskDetailsPage;\n","/Users/emilyliu/INFO340/project-2-emilyliu1999/src/schedule.js",["39"],"import React, { useState } from 'react';\nimport 'firebase/auth';\nimport './css/style.css';\nimport 'react-calendar/dist/Calendar.css';\nimport { Calendar } from 'react-calendar';\nimport { TaskList } from './App.js';\n\nexport function SchedulePage(props) {\n    let tasks = props.tasks;\n    const [date, onChange] = useState(new Date());\n    \n    let dateString = date.toString().slice(0, 15);\n\n    let currentTasks = [];\n    if (tasks) {\n        currentTasks = tasks.filter((task) => {\n            let deadline = task.deadline.slice(0, 15);\n            return deadline === dateString;\n        })\n    }\n\n    return (\n        <div className='content'>\n            <p>on this page, you may select dates on the calendar to see what tasks are due on any given day!</p>\n            <div className='row'>\n                <div className='row'>\n                    <div className='col d-flex'>\n                        <Calendar\n                            onChange={onChange}\n                            showWeekNumbers\n                            value={date}\n                        />\n                    </div>\n                    <div className='col d-flex'>\n                        <CurrentTaskCard tasks={currentTasks} isTaskList={true} date={date} />\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nfunction CurrentTaskCard(props) {\n    let date = props.date.toString().slice(4, 9);\n    let todayTasks = props.tasks;\n\n    return (\n        <div className='card mb-4'>\n          <div className='card-header' role='navigation'>\n              <h2 className='mb-4'>{date}</h2>\n              <ul className='nav nav-tabs card-header-tabs'>\n                <li className='nav-item'>\n                    <a className={'nav-link active'}>{'tasks'}</a>\n                </li>\n              </ul>\n          </div>\n    \n          <div className={'card-body ' + date + '-list'}>\n              <div className='row'>\n                  <div className='col-sm'>\n                      <TaskList tasks={todayTasks} />\n                  </div>\n              </div>\n          </div>\n        </div>\n      );\n}",{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":36,"column":21,"nodeType":"46","messageId":"47","endLine":36,"endColumn":33},{"ruleId":"48","severity":1,"message":"49","line":133,"column":11,"nodeType":"50","endLine":133,"endColumn":81},{"ruleId":"51","severity":1,"message":"52","line":133,"column":19,"nodeType":"53","messageId":"54","endLine":133,"endColumn":39},{"ruleId":"55","severity":1,"message":"56","line":141,"column":13,"nodeType":"50","endLine":141,"endColumn":25},{"ruleId":"48","severity":1,"message":"49","line":141,"column":13,"nodeType":"50","endLine":141,"endColumn":25},{"ruleId":"55","severity":1,"message":"56","line":142,"column":13,"nodeType":"50","endLine":142,"endColumn":25},{"ruleId":"48","severity":1,"message":"49","line":142,"column":13,"nodeType":"50","endLine":142,"endColumn":25},{"ruleId":"55","severity":1,"message":"56","line":143,"column":13,"nodeType":"50","endLine":143,"endColumn":25},{"ruleId":"48","severity":1,"message":"49","line":143,"column":13,"nodeType":"50","endLine":143,"endColumn":25},{"ruleId":"44","severity":1,"message":"57","line":151,"column":9,"nodeType":"46","messageId":"47","endLine":151,"endColumn":13},{"ruleId":"58","severity":1,"message":"59","line":190,"column":6,"nodeType":"60","endLine":190,"endColumn":8,"suggestions":"61"},{"ruleId":"44","severity":1,"message":"62","line":218,"column":9,"nodeType":"46","messageId":"47","endLine":218,"endColumn":14},{"ruleId":"48","severity":1,"message":"49","line":285,"column":7,"nodeType":"50","endLine":285,"endColumn":95},{"ruleId":"48","severity":1,"message":"49","line":286,"column":7,"nodeType":"50","endLine":286,"endColumn":96},{"ruleId":"58","severity":1,"message":"63","line":52,"column":6,"nodeType":"60","endLine":52,"endColumn":8,"suggestions":"64"},{"ruleId":"48","severity":1,"message":"65","line":53,"column":21,"nodeType":"50","endLine":53,"endColumn":54},"no-native-reassign",["66"],"no-negated-in-lhs",["67"],"no-unused-vars","'setCompleted' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-script-url","Script URL is a form of eval.","Literal","unexpectedScriptURL","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","'Show' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'props' and 'taskRef'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["68"],"'tasks' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'queryString' and 'taskKey'. Either include them or remove the dependency array.",["69"],"The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-global-assign","no-unsafe-negation",{"desc":"70","fix":"71"},{"desc":"72","fix":"73"},"Update the dependencies array to be: [props, taskRef]",{"range":"74","text":"75"},"Update the dependencies array to be: [queryString, taskKey]",{"range":"76","text":"77"},[5765,5767],"[props, taskRef]",[1761,1763],"[queryString, taskKey]"]