[{"/Users/Justin/info340/project2/project-2-emilyliu1999/src/index.js":"1","/Users/Justin/info340/project2/project-2-emilyliu1999/src/App.js":"2","/Users/Justin/info340/project2/project-2-emilyliu1999/src/login.js":"3","/Users/Justin/info340/project2/project-2-emilyliu1999/src/taskDetails.js":"4","/Users/Justin/info340/project2/project-2-emilyliu1999/src/schedule.js":"5"},{"size":991,"mtime":1608008701520,"results":"6","hashOfConfig":"7"},{"size":12268,"mtime":1608192616983,"results":"8","hashOfConfig":"7"},{"size":3253,"mtime":1608187603091,"results":"9","hashOfConfig":"7"},{"size":4453,"mtime":1608192616981,"results":"10","hashOfConfig":"7"},{"size":2268,"mtime":1608191758005,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"num4fm",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"/Users/Justin/info340/project2/project-2-emilyliu1999/src/index.js",[],"/Users/Justin/info340/project2/project-2-emilyliu1999/src/App.js",[],"/Users/Justin/info340/project2/project-2-emilyliu1999/src/login.js",[],"/Users/Justin/info340/project2/project-2-emilyliu1999/src/taskDetails.js",["24"],"import React, { useState, useEffect } from 'react';\nimport firebase from 'firebase/app';\nimport { Formik, Field, Form, ErrorMessage, useFormikContext } from 'formik';\nimport * as Yup from 'yup';\nimport DatePicker from 'react-datepicker';\nimport { Redirect, useParams } from 'react-router-dom';\nimport 'react-datepicker/dist/react-datepicker.css';\n\n// React component for the detailed page view of a task\nexport function TaskDetailsPage(props) {\n  const [currentTask, setCurrentTask] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isRedirect, setIsRedirect] = useState(false);\n\n  const { taskKey } = useParams();\n  const queryString = props.user.displayName + '/tasks/' + taskKey;\n\n  const redirectTo = () => {\n    if (taskKey === 'new') {\n      return <Redirect push exact to='/' />;\n    } else {\n      return <Redirect push to='/schedule' />;\n    }\n  };\n\n  const addNewTask = (taskKey, task) => {\n    if (taskKey === 'new') {\n      firebase.database().ref(props.user.displayName + '/tasks').push(task);  // push a new task\n    } else {\n      firebase.database().ref(queryString).set(task); // overwrite specifically the existing task\n    }\n  };\n\n  const DatePickerField = ({ name }) => {\n    const formik = useFormikContext();\n    const field = formik.getFieldProps(name);\n\n    return (\n      <DatePicker\n        name={field.name}\n        value={field.value}\n        autoComplete={\"off\"}\n        selected={(field.value && new Date(field.value)) || null}\n        onChange={value => formik.setFieldValue(name, value)}\n      />\n    );\n  }\n\n  useEffect(() => { // if not creating a new task, check if the task exists\n    const queryRef = firebase.database().ref(queryString);\n    queryRef.once('value', function(snapshot) {\n      if (taskKey !== 'new') {\n        if (snapshot.val()) {\n          setCurrentTask(snapshot.val());\n        }\n      }\n    }).then(() => setIsLoading(false));\n<<<<<<< HEAD\n\n    return function cleanup() {\n      queryRef.off();\n    }\n  }, []);\n=======\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n>>>>>>> a60a58895bd53160839c62aafd4958f86d105a65\n\n  // if there has just been a change, redirect to the home page\n  if (isRedirect) {\n    return redirectTo();\n  }\n\n  if (isLoading) {\n    return (\n      <div className='spinner'>\n        <i className='fa fa-spinner fa-spin fa-3x' aria-label='Loading...'></i>\n      </div>\n    );\n  }\n\n  // error message for when the task is not found in the database\n  if (taskKey !== 'new' && !currentTask) {\n    return (\n      <h2>Task not found.</h2>\n    );\n  }\n\n  return (\n    <>\n      <Formik\n         initialValues={{\n           taskName: (currentTask ? currentTask.name : ''),\n           taskDescription: (currentTask ? currentTask.desc : ''),\n           deadline: (currentTask ? new Date(currentTask.deadline) : ''),\n           complete: (currentTask ? currentTask.complete : false)\n         }}\n         validationSchema={Yup.object({\n           taskName: Yup.string()\n             .required('*Required*'),\n           taskDescription: Yup.string()\n             .required('*Required*'),\n           deadline: Yup.string().required('*Required*'),\n           complete: Yup.string()\n         })}\n         onSubmit={(values, { setSubmitting }) => {\n           setTimeout(() => {\n             let newTaskObj = {name: values.taskName, desc: values.taskDescription, deadline: values.deadline.toString(), complete: values.complete};\n             addNewTask(taskKey, newTaskObj);\n             setIsRedirect(true);\n             setSubmitting(false);\n           }, 400);\n         }}\n      >\n\n      <Form>\n        <label htmlFor='taskName'>Task Name</label>\n        <Field name='taskName' type='text' autoComplete=\"off\" />\n        <ErrorMessage name='taskName' />\n\n        <label htmlFor='taskDescription'>Task Description</label>\n        <Field name='taskDescription' as='textarea' autoComplete=\"off\" />\n        <ErrorMessage name='taskDescription' />\n\n        <label htmlFor='deadline'>Deadline</label>\n        <DatePickerField name='deadline' />\n        <ErrorMessage name='deadline' />\n\n        <label htmlFor='complete'>Complete?</label>\n        <Field name='complete' type='checkbox' />\n        <ErrorMessage name='complete' />\n\n        <button type='submit'>save</button>\n        <button type='button' onClick={() => {\n          setIsRedirect(true);\n        }}>cancel</button>\n      </Form>\n    </Formik>\n   </>\n  );\n};\n\nexport default TaskDetailsPage;\n","/Users/Justin/info340/project2/project-2-emilyliu1999/src/schedule.js",[],["25","26"],{"ruleId":"27","severity":1,"message":"28","line":62,"column":6,"nodeType":"29","endLine":62,"endColumn":8,"suggestions":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'queryString' and 'taskKey'. Either include them or remove the dependency array.","ArrayExpression",["35"],"no-native-reassign",["36"],"no-negated-in-lhs",["37"],{"desc":"38","fix":"39"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [queryString, taskKey]",{"range":"40","text":"41"},[1980,1982],"[queryString, taskKey]"]