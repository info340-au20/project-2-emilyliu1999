[{"/Users/Justin/info340/project2/project-2-emilyliu1999/src/index.js":"1","/Users/Justin/info340/project2/project-2-emilyliu1999/src/App.js":"2","/Users/Justin/info340/project2/project-2-emilyliu1999/src/login.js":"3","/Users/Justin/info340/project2/project-2-emilyliu1999/src/taskDetails.js":"4","/Users/Justin/info340/project2/project-2-emilyliu1999/src/schedule.js":"5"},{"size":991,"mtime":1608008701520,"results":"6","hashOfConfig":"7"},{"size":11153,"mtime":1608187469085,"results":"8","hashOfConfig":"7"},{"size":3253,"mtime":1607999493732,"results":"9","hashOfConfig":"7"},{"size":4071,"mtime":1608184499862,"results":"10","hashOfConfig":"7"},{"size":2126,"mtime":1608184499861,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"num4fm",{"filePath":"14","messages":"15","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/Justin/info340/project2/project-2-emilyliu1999/src/index.js",[],"/Users/Justin/info340/project2/project-2-emilyliu1999/src/App.js",["24","25","26","27","28","29","30","31","32","33","34"],"/Users/Justin/info340/project2/project-2-emilyliu1999/src/login.js",[],"/Users/Justin/info340/project2/project-2-emilyliu1999/src/taskDetails.js",["35"],"import React, { useState, useEffect } from 'react';\nimport firebase from 'firebase/app';\nimport { Formik, Field, Form, ErrorMessage, useFormikContext } from 'formik';\nimport * as Yup from 'yup';\nimport DatePicker from \"react-datepicker\";\nimport { Redirect, useParams } from 'react-router-dom';\nimport \"react-datepicker/dist/react-datepicker.css\";\n\n// React component for the detailed page view of a task\nexport function TaskDetailsPage(props) {\n  const [currentTask, setCurrentTask] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isRedirect, setIsRedirect] = useState(false);\n\n  const { taskKey } = useParams();\n  const queryString = props.user.displayName + \"/tasks/\" + taskKey;\n\n  const redirectToHome = () => {\n    return <Redirect exact to=\"/\" />;\n  };\n\n  const addNewTask = (taskKey, task) => {\n    if (taskKey === \"new\") {\n      firebase.database().ref(props.user.displayName + \"/tasks\").push(task);  // push a new task\n    } else {\n      firebase.database().ref(queryString).set(task); // overwrite specifically the existing task\n    }\n  };\n\n  const DatePickerField = ({ name }) => {\n    const formik = useFormikContext();\n    const field = formik.getFieldProps(name);\n\n    return (\n      <DatePicker\n        name={field.name}\n        value={field.value}\n        selected={(field.value && new Date(field.value)) || null}\n        onChange={value => formik.setFieldValue(name, value)}\n      />\n    );\n  }\n\n  useEffect(() => { // if not creating a new task, check if the task exists\n    firebase.database().ref(queryString).once('value', function(snapshot) {\n      if (taskKey !== \"new\") {\n        if (snapshot.val()) {\n          setCurrentTask(snapshot.val());\n        }\n      }\n    }).then(() => setIsLoading(false));\n  }, []);\n\n  // if there has just been a change, redirect to the home page\n  if (isRedirect) {\n    return redirectToHome();\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"spinner\">\n        <i className=\"fa fa-spinner fa-spin fa-3x\" aria-label=\"Loading...\"></i>\n      </div>\n    );\n  }\n\n  // error message for when the task is not found in the database\n  if (taskKey !== \"new\" && !currentTask) {\n    return (\n      <h2>Task not found.</h2>\n    );\n  }\n\n  return (\n    <>\n      <Formik\n         initialValues={{\n           taskName: (currentTask ? currentTask.name : \"\"),\n           taskDescription: (currentTask ? currentTask.desc : \"\"),\n           deadline: (currentTask ? Date.parse(currentTask.deadline) : \"\"),\n           complete: (currentTask ? currentTask.complete : false)\n         }}\n         validationSchema={Yup.object({\n           taskName: Yup.string()\n             .required('*Required*'),\n           taskDescription: Yup.string()\n             .required('*Required*'),\n           deadline: Yup.string().required('*Required*'),\n           complete: Yup.string()\n         })}\n         onSubmit={(values, { setSubmitting }) => {\n           setTimeout(() => {\n             let newTaskObj = {name: values.taskName, desc: values.taskDescription, deadline: values.deadline.toString(), complete: values.complete};\n             addNewTask(taskKey, newTaskObj);\n             setIsRedirect(true);\n             setSubmitting(false);\n           }, 400);\n         }}\n      >\n\n      <Form>\n        <label htmlFor=\"taskName\">Task Name</label>\n        <Field name=\"taskName\" type=\"text\" />\n        <ErrorMessage name=\"taskName\" />\n\n        <label htmlFor=\"taskDescription\">Task Description</label>\n        <Field name=\"taskDescription\" as=\"textarea\" />\n        <ErrorMessage name=\"taskDescription\" />\n\n        <label htmlFor=\"deadline\">Deadline</label>\n        <DatePickerField name=\"deadline\" />\n        <ErrorMessage name=\"deadline\" />\n\n        <label htmlFor=\"complete\">Complete?</label>\n        <Field name=\"complete\" type=\"checkbox\" />\n        <ErrorMessage name=\"complete\" />\n\n        <button type=\"submit\">save</button>\n        <button type=\"button\" onClick={() => {\n          setIsRedirect(true);\n        }}>cancel</button>\n      </Form>\n    </Formik>\n   </>\n  );\n};\n\nexport default TaskDetailsPage;\n",["36","37"],"/Users/Justin/info340/project2/project-2-emilyliu1999/src/schedule.js",["38"],{"ruleId":"39","severity":1,"message":"40","line":135,"column":11,"nodeType":"41","endLine":135,"endColumn":70},{"ruleId":"42","severity":1,"message":"43","line":143,"column":13,"nodeType":"41","endLine":143,"endColumn":25},{"ruleId":"39","severity":1,"message":"40","line":143,"column":13,"nodeType":"41","endLine":143,"endColumn":25},{"ruleId":"42","severity":1,"message":"43","line":144,"column":13,"nodeType":"41","endLine":144,"endColumn":25},{"ruleId":"39","severity":1,"message":"40","line":144,"column":13,"nodeType":"41","endLine":144,"endColumn":25},{"ruleId":"42","severity":1,"message":"43","line":145,"column":13,"nodeType":"41","endLine":145,"endColumn":25},{"ruleId":"39","severity":1,"message":"40","line":145,"column":13,"nodeType":"41","endLine":145,"endColumn":25},{"ruleId":"44","severity":1,"message":"45","line":175,"column":6,"nodeType":"46","endLine":175,"endColumn":8,"suggestions":"47"},{"ruleId":"48","severity":1,"message":"49","line":203,"column":9,"nodeType":"50","messageId":"51","endLine":203,"endColumn":14},{"ruleId":"39","severity":1,"message":"40","line":270,"column":7,"nodeType":"41","endLine":270,"endColumn":95},{"ruleId":"39","severity":1,"message":"40","line":271,"column":7,"nodeType":"41","endLine":271,"endColumn":96},{"ruleId":"44","severity":1,"message":"52","line":52,"column":6,"nodeType":"46","endLine":52,"endColumn":8,"suggestions":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"39","severity":1,"message":"58","line":53,"column":21,"nodeType":"41","endLine":53,"endColumn":54},"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'taskRef'. Either include it or remove the dependency array.","ArrayExpression",["59"],"no-unused-vars","'tasks' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'queryString' and 'taskKey'. Either include them or remove the dependency array.",["60"],"no-native-reassign",["61"],"no-negated-in-lhs",["62"],"The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md",{"desc":"63","fix":"64"},{"desc":"65","fix":"66"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [taskRef]",{"range":"67","text":"68"},"Update the dependencies array to be: [queryString, taskKey]",{"range":"69","text":"70"},[5495,5497],"[taskRef]",[1761,1763],"[queryString, taskKey]"]